/* Copyright (c) 2024, Mikhail Kovalev
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SYSLOG_H
#define _SYSLOG_H 1

/// logopt constants for openlog()
enum {
    LOG_PID    = 0x1,  //< Log the process ID with each message.
    LOG_CONS   = 0x2,  //< Log to the system console on error.
    LOG_NDELAY = 0x4,  //< Open the connection immediately (normally, the connection is opened when
                       //the first message is logged).
    LOG_ODELAY = 0x8,  //< Delay open until syslog() is called.
    LOG_NOWAIT = 0x10, //< Don't wait for child processes that may have been created while logging
                       //the message.
};

/// logfac constants for openlog()
enum {
    LOG_KERN   = 0x0,  //< Kernel messages.
    LOG_USER   = 0x1,  //< Messages generated by a user process.
    LOG_MAIL   = 0x2,  //< Mail system.
    LOG_NEWS   = 0x3,  //< Messages generated by news system.
    LOC_UUCP   = 0x4,  //< Messages generated by UUCP system.
    LOG_DAEMON = 0x5,  //< Messages generated by system daemons.
    LOG_AUTH   = 0x6,  //< Security/authorization messages.
    LOG_CRON   = 0x7,  //< Messages generated by system cron daemon.
    LOG_LPR    = 0x8,  //< Messages generated by line printer subsystem.
    LOG_LOCAL0 = 0x9,  //< Reserved for local use.
    LOG_LOCAL1 = 0xA,  //< Reserved for local use.
    LOG_LOCAL2 = 0xB,  //< Reserved for local use.
    LOG_LOCAL3 = 0xC,  //< Reserved for local use.
    LOG_LOCAL4 = 0xD,  //< Reserved for local use.
    LOG_LOCAL5 = 0xE,  //< Reserved for local use.
    LOG_LOCAL6 = 0xF,  //< Reserved for local use.
    LOG_LOCAL7 = 0x10, //< Reserved for local use.
};

/// A mask for priority pri
#define LOG_MASK(pri) (1 << (pri))

/// Priority constants for syslog()
enum {
    LOG_EMERG   = 0x0, //< System is unusable.
    LOG_ALERT   = 0x1, //< Action must be taken immediately.
    LOG_CRIT    = 0x2, //< Critical conditions.
    LOG_ERR     = 0x3, //< Error conditions.
    LOG_WARNING = 0x4, //< Warning conditions.
    LOG_NOTICE  = 0x5, //< Normal but significant condition.
    LOG_INFO    = 0x6, //< Informational.
    LOG_DEBUG   = 0x7, //< Debug-level messages.
};

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __STDC_HOSTED__

void closelog(void);
void openlog(const char *ident, int logopt, int logfac);
int setlogmask(int mask);
void syslog(int pri, const char *fmt, ...);

#endif // __STDC_HOSTED__

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif // _SYSLOG_H